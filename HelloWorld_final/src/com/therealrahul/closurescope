/*
    Owner: corresponds to the enclosing object where the closure is defined, which may be either a class or a closure
    delegate: corresponds to a third party object where methods, calls or properties are resolved whenever the receiver of the message is not defined. 
    this: corresponds to the enclosing class where the closure is defined
*/

class ScopeDemo {                                             // class called Scopedemo with 2 closures in it

    def outerClosure = {                                      // 1st closure - the outerclosure
        println this.class.name
        println owner.class.name
        println delegate.class.name
        def nestedClosure = {                                 // inner closure
            println this.class.name
            println owner.class.name
            println delegate.class.name
        } 
        nestedClosure()
    } 
}

def demo = new ScopeDemo()                                    // creates an instance of the scopedemo
demo.outerClosure                                             // calls the outerclosure 